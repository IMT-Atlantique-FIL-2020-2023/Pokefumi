openapi: 3.0.1
info:
  title: Round service
  description: "To manage rounds in a match"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: http://127.0.0.1:3335
tags:
  - name: pokemon
    description: Pokemon infos
  - name: round
    description: rounds infos
paths:
  /api:
    get:
      summary: Check is the api is up
      operationId: getApi
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /pokemons:
    get:
      tags:
        - pokemon
      summary: Get the list of existing pokemons
      operationId: getPokemons
      responses:
        200:
          description: The list of pokemons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pokemon"
  /pokemons/{id}:
    get:
      tags:
        - pokemon
      summary: Get the pokemon for a given id
      operationId: getPokemonById
      parameters:
        - name: id
          in: path
          description: Pokemon ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The pokemon for a given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
  /pokemons/name/{name}:
    get:
      tags:
        - pokemon
      summary: Get the pokemon for a given name
      operationId: getPokemonByName
      parameters:
        - name: name
          in: path
          description: Pokemon name
          required: true
          schema:
            type: string
      responses:
        200:
          description: The pokemon for a given name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
  /types:
    get:
      tags:
        - pokemon
      summary: Get the list of existing types
      operationId: getTypes
      responses:
        200:
          description: The list of types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TypePokemon"
  /types/{id}:
    get:
      tags:
        - pokemon
      summary: Get the type for a given id
      operationId: getTypeById
      parameters:
        - name: id
          in: path
          description: type ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The type for a given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypePokemon"
  /types/name/{name}:
    get:
      tags:
        - pokemon
      summary: Get the type for a given name
      operationId: getTypeByName
      parameters:
        - name: name
          in: path
          description: type name
          required: true
          schema:
            type: string
      responses:
        200:
          description: The type for a given name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypePokemon"
  /round/{id1}/{id2}:
    get:
      tags:
        - round
      summary: Get the result of a round for two given pokemon ids
      operationId: getRoundsResultById
      parameters:
        - name: id1
          in: path
          description: pokemon1 id
          required: true
          schema:
            type: string
        - name: id2
          in: path
          description: pokemon2 id
          required: true
          schema:
            type: string
      responses:
        200:
          description: The winning pokemon
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
  /round/name/{name1}/{name2}:
    get:
      tags:
        - round
      summary: Get the result of a round for two given pokemon names
      operationId: getRoundsResultByName
      parameters:
        - name: name1
          in: path
          description: pokemon1 name
          required: true
          schema:
            type: string
        - name: name2
          in: path
          description: pokemon2 name
          required: true
          schema:
            type: string
      responses:
        200:
          description: The winning pokemon
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pokemon"
  /match:
    put:
      tags:
        - round
      security:
        - bearerAuth: []
      summary: Play the round for a given user and a given match
      operationId: playRound
      requestBody:
        content:
          application/json:
            schema:
              required:
                - idMatch
                - idxPokemonDeck
              properties:
                idMatch:
                  description: id of the match
                  type: integer
                idxPokemonDeck:
                  description: id of the pokemon in the deck
                  type: integer
      responses:
        200:
          description: The winning pokemon
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoundResultDto"
        408:
          description: Timeout the other player didn't responded within the allowed delay

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Pokemon:
      title: Pokemon
      description: "A POKEMON :o"
      type: object
      properties:
        id:
          description: Pokemon's id
          type: integer
          format: int64
        name:
          description: Pokemon's name
          type: string
        types:
          description: List of the types for this pokemon
          type: array
          items:
            $ref: "#/components/schemas/TypePokemon"

    TypePokemon:
      title: TypePokemon
      description: "A POKEMON TYPE :o"
      type: object
      properties:
        id:
          description: id of the type
          type: integer
          format: int64
        name:
          description: label of the type
          type: string
        faiblesses:
          description: list of weakness for a type
          type: array
          items:
            type: string
        resistances:
          description: list of weakness for a type
          type: array
          items:
            type: string

    RoundResultDto:
      title: RoundResultDto
      description: "The result for a round"
      type: object
      required:
        - roundWinner
        - pokemonWinner
        - roundLooser
        - pokemonLooser
        - roundIndex
      properties:
        roundWinner:
          description: the id of the winner
          type: integer
        pokemonWinner:
          description: the pokeApi id of the winner's pokemon
          type: integer
        roundLooser:
          description: the id of the looser
          type: integer
        pokemonLooser:
          description: the pokeApi id of the looser's pokemon
          type: integer
        roundIndex:
          description: the index of the round
          type: integer
          minimum: 0
          maximum: 9
